{"name":"Credit card validations","tagline":"A ruby gem for validating credit card numbers, generating ones, luhn checks","body":"# CreditCardValidations\r\n\r\n[![Build Status](http://img.shields.io/travis/Fivell/credit_card_validations.svg)](https://travis-ci.org/Fivell/credit_card_validations)\r\n[![Dependency Status](http://img.shields.io/gemnasium/Fivell/credit_card_validations.svg)](https://gemnasium.com/Fivell/credit_card_validations)\r\n[![Coverage Status](http://img.shields.io/coveralls/Fivell/credit_card_validations.svg)](https://coveralls.io/r/Fivell/credit_card_validations)\r\n[![Code Climate](http://img.shields.io/codeclimate/github/Fivell/credit_card_validations.svg)](https://codeclimate.com/github/Fivell/credit_card_validations)\r\n[![Gem Version](http://img.shields.io/gem/v/credit_card_validations.svg)](https://rubygems.org/gems/credit_card_validations)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://Fivell.mit-license.org)\r\n\r\n\r\nGem adds validator  to check whether or not a given number actually falls within the ranges of possible numbers prior to performing such verification, and, as such, CreditCardValidations simply verifies that the credit card number provided is well-formed.\r\n\r\nMore info about card BIN numbers http://en.wikipedia.org/wiki/Bank_card_number\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'credit_card_validations'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install credit_card_validations\r\n\r\n## Usage\r\n\r\n\r\nThe following issuing institutes are accepted:\r\n    \r\n    name             | key          |\r\n    -------------------------------------------------------------------\r\n    American Express | :amex        | http://en.wikipedia.org/wiki/American_Express\r\n    China UnionPay   | :unionpay    | http://en.wikipedia.org/wiki/China_UnionPay\r\n    Dankrot          | :dankrot     | http://en.wikipedia.org/wiki/Dankort\r\n    Diners Club      | :diners      | http://en.wikipedia.org/wiki/Diners_Club_International\r\n    Dinner Club US   | :diners_us   | http://en.wikipedia.org/wiki/Diners_Club_International#MasterCard_alliance\r\n    Discover         | :discover    | http://en.wikipedia.org/wiki/Discover_Card\r\n    Hipercard        | :hipercard   | http://pt.wikipedia.org/wiki/Hipercard\r\n    JCB              | :jcb         | http://en.wikipedia.org/wiki/Japan_Credit_Bureau\r\n    Laser            | :laser       | http://en.wikipedia.org/wiki/Laser_%28debit_card%29\r\n    Maestro          | :maestro     | http://en.wikipedia.org/wiki/Maestro_%28debit_card%29\r\n    MasterCard       | :mastercard  | http://en.wikipedia.org/wiki/MasterCard\r\n    Rupay            | :rupay       | http://en.wikipedia.org/wiki/RuPay\r\n    Solo             | :solo        | http://en.wikipedia.org/wiki/Solo_(debit_card)\r\n    Switch           | :switch      | http://en.wikipedia.org/wiki/Switch_(debit_card)\r\n    Visa             | :visa        | http://en.wikipedia.org/wiki/Visa_Inc.\r\n\r\n\r\n\r\nExamples using string monkey patch\r\n\r\n```ruby\r\n    require 'credit_card_validations/string'\r\n    '5274 5763 9425 9961'.credit_card_brand   #=> :mastercard\r\n    '5274 5763 9425 9961'.credit_card_brand_name   #=> \"MasterCard\"\r\n    '5274 5763 9425 9961'.valid_credit_card_brand?(:mastercard, :visa) #=> true\r\n    '5274 5763 9425 9961'.valid_credit_card_brand?(:amex) #=> false\r\n    '5274 5763 9425 9961'.valid_credit_card_brand?('MasterCard') #=> true\r\n```\r\n\r\nActiveModel support\r\n\r\nonly for certain brads\r\n\r\n```ruby\r\n    class CreditCardModel \r\n        attr_accessor :number\r\n        include ActiveModel::Validations\r\n        validates :number, credit_card_number: {brands: [:amex, :maestro]} \r\n    end\r\n```\r\n\r\nfor all known brands\r\n\r\n```ruby\t\r\n    validates :number, presence: true, credit_card_number: true\r\n```\r\n\r\nExamples using CreditCardValidations::Detector class\r\n\r\n```ruby\t\r\n    number = \"4111111111111111\"\r\n    detector = CreditCardValidations::Detector.new(number)\r\n    detector.brand #:visa\r\n    detector.visa? #true\r\n    detector.valid?(:mastercard,:maestro) #false\r\n    detector.valid?(:visa, :mastercard) #true\r\n    detector.issuer_category  #\"Banking and financial\"\r\n```\r\n\r\nAlso You can add your own brand rules to detect other credit card brands/types\r\npassing name,length(integer/array of integers) and prefix(string/array of strings)\r\nExample\r\n\r\n```ruby\t\r\n    CreditCardValidations.add_brand(:voyager, {length: 15, prefixes: '86'})\r\n    CreditCardValidations.add_brand(:en_route, {length: 15, prefixes: ['2014', '2149']}, {skip_luhn: true}) #skip luhn\r\n          \r\n    voyager_test_card_number = '869926275400212'\r\n    CreditCardValidations::Detector.new(voyager_test_card_number).brand #:voyager\r\n    CreditCardValidations::Detector.new(voyager_test_card_number).voyager? #true\r\n    \r\n    en_route_test_card_number = '2014-0000-0000-001'\r\n    CreditCardValidations::Detector.new(en_route_test_card_number).brand #:en_route\r\n    CreditCardValidations::Detector.new(en_route_test_card_number).en_route? #true\r\n```\r\n\r\nRemove brands also supported\r\n\r\n```ruby\r\n    CreditCardValidations.delete_brand(:maestro)\r\n```\r\n\r\n\r\n\r\nCheck luhn\r\n\r\n```ruby\t\r\n    CreditCardValidations::Detector.new(@credit_card_number).valid_luhn?\r\n    #or\r\n    CreditCardValidations::Luhn.valid?(@credit_card_number)\r\n```  \r\n\r\nGenerate credit card numbers that pass validation\r\n\r\n```ruby\r\n CreditCardValidations::Factory.random(:amex)\r\n # => \"348051773827666\"\r\n CreditCardValidations::Factory.random(:maestro)\r\n # => \"6010430241237266856\"\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}